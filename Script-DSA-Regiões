# -*- coding: utf-8 -*-
"""
Created on Sat Mar 29 18:44:52 2025

@author: Fernanda
"""

#%%Importa os pacotes instalados

import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency
import statsmodels.api as sm
import seaborn as sns
import matplotlib.pyplot as plt
import prince
import plotly.io as pio
pio.renderers.default = 'browser'
import plotly.graph_objects as go
from adjustText import adjust_text
import matplotlib.ticker as mtick
import matplotlib as mpl

#%% Seção 1: Verifica se há associação significativa entre as variáveis escolhidas,
#com uma significância de 5%, a partir do teste qui²

#%% 1.1 - Importa o banco de dados no projeto
#Fonte dos dados: Pesquisa TIC Domicílios 2024, recorte de Indivíduos
#Acesso disponível em: <https://cetic.br/pt/arquivos/domicilios/2024/individuos/>

acesso_mca = pd.read_csv("tic_domicilios_2024_individuos_base_de_microdados_v1.0.csv", sep=';')

#%% 1.2 - Seleciona apenas as variáveis que farão parte da análise
#Foram selecionadas 3 variáveis que serão utilizadas na ACM:
    # C5_DISPOSITIVOS = Dispositivo utilizado pelos usuários de Internet
    # TIPO_OCUP = Tipo da ocupação
    # RENDA_PESSOAL = Renda pessoal por faixas de valores
    
#E uma variável adicional que será utilizada para recortes específicos
    # COD_REGIAO_2 = região do Brasil
    
dados_mca = acesso_mca[acesso_mca['PEA']!=5]
dados_mca = dados_mca[dados_mca['C5_DISPOSITIVOS'] != 99]
dados_mca = dados_mca[dados_mca['COD_REGIAO_2'] == 2]
dados_mca = dados_mca[['C5_DISPOSITIVOS','TIPO_OCUP','RENDA_PESSOAL']]
dados_mca.columns = dados_mca.columns.str.replace("_", "-")
#%% 1.3 - Retoma os rótulos de dados codificados na pesquisa TIC Domicílios
    #C5-DISPOSITIVOS
    
value_labels_dispositivos = {
    1: "Apenas computador",
    2: "Apenas telefone celular",
    3: "Ambos",
    4: "Nenhum desses dispositivos",
}

dados_mca['C5-DISPOSITIVOS'] = dados_mca['C5-DISPOSITIVOS'].replace(value_labels_dispositivos)

    #TIPO-OCUP

value_labels_ocupacao = {
    1: "Formal",
    2: "Informal",
    4: "Não se aplica",
}

dados_mca['TIPO-OCUP'] = dados_mca['TIPO-OCUP'].replace(value_labels_ocupacao)

    #RENDA-PESSOAL

value_labels_renda = {
    1 : "Até 1 SM",
    2 : "Mais de 1 SM até 2 SM",
    3 : "Mais de 2 SM até 3 SM",
    4 : "Mais de 3 SM até 5 SM",
    5 : "Mais de 5 SM até 10 SM",
    6 : "Mais de 10 SM",
    7 : "Mais de 10 SM",
    8 : "Mais de 10 SM",
    9 : "Não tem renda",
    97 : "Não sabe",
    98 : "Não respondeu"
}

dados_mca['RENDA-PESSOAL'] = dados_mca['RENDA-PESSOAL'].replace(value_labels_renda)

#%% 1.4 - Organiza as informações descritivas sobre as variáveis selecionadas

print(dados_mca['C5-DISPOSITIVOS'].value_counts())
print(dados_mca['TIPO-OCUP'].value_counts())
print(dados_mca['RENDA-PESSOAL'].value_counts())

#%% 1.5 - Analisa as tabelas de contigência para contexto Brasil

dados_mca = dados_mca[['C5-DISPOSITIVOS','TIPO-OCUP','RENDA-PESSOAL']]
tabela_mca_1 = pd.crosstab(dados_mca["C5-DISPOSITIVOS"], dados_mca["TIPO-OCUP"])
tabela_mca_2 = pd.crosstab(dados_mca["C5-DISPOSITIVOS"], dados_mca["RENDA-PESSOAL"])
tabela_mca_3 = pd.crosstab(dados_mca["TIPO-OCUP"], dados_mca["RENDA-PESSOAL"])

print(tabela_mca_1)
print(tabela_mca_2)
print(tabela_mca_3)

#output_file = "tabelas_mca.xlsx"

# Exportando para Excel com múltiplas abas
#with pd.ExcelWriter(output_file, engine="xlsxwriter") as writer:
    #tabela_mca_1.to_excel(writer, sheet_name="Dispositivos x TipoOcup")
    #tabela_mca_2.to_excel(writer, sheet_name="Dispositivos x Renda")
    #tabela_mca_3.to_excel(writer, sheet_name="TipoOcup x Renda")



#%% 1.6 - Analisa a significância estatística das associações das variáveis (teste qui²)

tab_1 = chi2_contingency(tabela_mca_1)

print("Associação Dispositivos x Tipo de Ocupação")
print(f"estatística qui²: {round(tab_1[0], 2)}")
print(f"p-valor da estatística: {round(tab_1[1], 4)}")
print(f"graus de liberdade: {tab_1[2]}")

tab_2 = chi2_contingency(tabela_mca_2)

print("Associação Dispositivos x Renda Pessoal")
print(f"estatística qui²: {round(tab_2[0], 2)}")
print(f"p-valor da estatística: {round(tab_2[1], 4)}")
print(f"graus de liberdade: {tab_2[2]}")

tab_3 = chi2_contingency(tabela_mca_3)

print("Associação Tipo de Ocupação x Renda Pessoal")
print(f"estatística qui²: {round(tab_3[0], 2)}")
print(f"p-valor da estatística: {round(tab_3[1], 4)}")
print(f"graus de liberdade: {tab_3[2]}")

#%% Seção 2: Elabora a MCA: Multiple Correspondence Analysis

#%% 2.1 - Parametriza a MCA para duas dimensões (eixos X e Y no mapa perceptual)
mca = prince.MCA(n_components=2).fit(dados_mca)

#%% 2.2 - Calcula a quantidade de dimensões obtida na análise

# Quantidade de dimensões = qtde total de categorias - qtde de variáveis

# Quantidade total de categorias
mca.J_

# Quantidade de variáveis na análise
mca.K_

# Quantidade de dimensões
quant_dim = mca.J_ - mca.K_

# Resumo das informações
print(f"quantidade total de categorias: {mca.J_}")
print(f"quantidade de variáveis: {mca.K_}")
print(f"quantidade de dimensões: {quant_dim}")

#%% 2.3 - Obtem os eigenvalues (autovalores)

tabela_autovalores = mca.eigenvalues_summary

print(tabela_autovalores)

#%% Obtendo as coordenadas principais das categorias das variáveis

coord_burt = mca.column_coordinates(dados_mca)

print(coord_burt)

#%% Obtendo as coordenadas-padrão das categorias das variáveis

coord_padrao = mca.column_coordinates(dados_mca)/np.sqrt(mca.eigenvalues_)

print(coord_padrao)

#%% Obtendo as coordenadas das observações do banco de dados

# Na função, as coordenadas das observações vêm das coordenadas-padrão

coord_obs = mca.row_coordinates(dados_mca)

print(coord_obs)


#%% Plotando o mapa perceptual

plt.figure(figsize=(8, 6), dpi=300)

# Preparar dados
chart = coord_padrao.reset_index()

# Extrair nome da variável (antes do "_") e manter a categoria como está
var_chart = chart['index'].str.extract(r'(^[^_]+)')[0]           # nome da variável
categoria_chart = chart['index'].str.replace(r'^[^_]+_', '', regex=True).str.strip('_ ')  # só a parte da categoria

# Renomear variáveis para legenda
nome_variaveis = {
    'C5-DISPOSITIVOS': 'Tipo de dispositivo de acesso',
    'TIPO-OCUP': 'Tipo de ocupação',
    'RENDA-PESSOAL': 'Faixa de renda pessoal'
}
var_chart_legenda = var_chart.replace(nome_variaveis)

# Construir DataFrame
chart_df_mca = pd.DataFrame({
    'categoria': categoria_chart,
    'obs_x': chart[0],
    'obs_y': chart[1],
    'variavel': var_chart_legenda
})

# Paleta em tons de cinza
cores_cinza = {
    'Tipo de dispositivo de acesso': '#555555',
    'Tipo de ocupação': '#999999',
    'Faixa de renda pessoal': '#cccccc'
}

# Gráfico
ax = plt.gca()
sns.scatterplot(
    data=chart_df_mca,
    x='obs_x',
    y='obs_y',
    hue='variavel',
    palette=cores_cinza,
    s=20,
    ax=ax
)

# Estética
sns.despine(top=True, right=True, left=False, bottom=False)
plt.tick_params(size=2, labelsize=6)
plt.xlabel(f"Dimensão 1: {tabela_autovalores.iloc[0,1]} da inércia", fontsize=11)
plt.ylabel(f"Dimensão 2: {tabela_autovalores.iloc[1,1]} da inércia", fontsize=11)

# Legenda limpa no canto superior direito
plt.legend(
    title="Variável",
    title_fontsize='9',
    fontsize='7',
    loc='upper right',
    frameon=False
)

# Jitter para pontos sobrepostos
jitter_strength = 0.01
grouped = chart_df_mca.groupby(['obs_x', 'obs_y']).size().reset_index(name='count')

for _, row in grouped[grouped['count'] > 1].iterrows():
    mask = (chart_df_mca['obs_x'] == row['obs_x']) & (chart_df_mca['obs_y'] == row['obs_y'])
    indices = chart_df_mca[mask].index
    n = len(indices)
    angles = np.linspace(0, 2 * np.pi, n, endpoint=False)
    chart_df_mca.loc[indices, 'obs_x'] += np.cos(angles) * jitter_strength
    chart_df_mca.loc[indices, 'obs_y'] += np.sin(angles) * jitter_strength

# Rótulos no gráfico
texts = []
for i, row in chart_df_mca.iterrows():
    texts.append(ax.text(row['obs_x'], row['obs_y'], row['categoria'], fontsize=8))

adjust_text(texts, ax=ax, arrowprops=dict(arrowstyle="-", color='gray', lw=0.5))

plt.show()
